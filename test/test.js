import { mean, sd, mae, mape, rmse, nrmse } from '../src/core';
import TA from '../src/main';
import assert from 'assert';

// random ohlcv
let randomize = (tleft, right) => {
  return (right - tleft) * Math.random() + tleft;
}
let random = [];
for (let i = 0; i < 50; i++) {
  let tick = [];
  tick.push(new Date('2018-01-01').getTime() + i * 60000); //t
  let lcoh = [randomize(5000, 20000),randomize(5000, 20000),randomize(5000, 20000),randomize(5000, 20000)].sort();
  if(randomize(0,1)) { let temp = lcoh[1]; lcoh[1] = lcoh[2]; lcoh[2] = temp; }
  tick.push(lcoh[1]);             //o
  tick.push(lcoh[0]);             //h
  tick.push(lcoh[3]);             //l
  tick.push(lcoh[2]);             //c
  tick.push(randomize(10, 1000));  //v
  random.push(tick);
}
let noize = new TA(random, TA.exchangeFormat);

/* eslint-env mocha */

describe('Getters formats', () => {
  let ta = new TA([[0],[1],[2],[3],[4],[5]], TA.simpleFormat);
  let delta = Math.abs(0 - ta.$time[0]) + Math.abs(1 - ta.$open[0]) + Math.abs(2 - ta.$high[0]) +
              Math.abs(3 - ta.$low[0]) + Math.abs(4 - ta.$close[0]) + Math.abs(5 - ta.$volume[0]);
  it(`simpleFormat`, () => assert.ok(delta < 1e-2));
  ta = new TA([[0,1,2,3,4,5]], TA.exchangeFormat);
  delta = Math.abs(0 - ta.$time[0]) + Math.abs(1 - ta.$open[0]) + Math.abs(2 - ta.$high[0]) +
          Math.abs(3 - ta.$low[0]) + Math.abs(4 - ta.$close[0]) + Math.abs(5 - ta.$volume[0]);
  it(`exchangeFormat`, () => assert.ok(delta < 1e-2));
  ta = new TA({time:[0], open:[1], high:[2], low:[3], close:[4],volume:[5]}, TA.objectFormat);
  delta = Math.abs(0 - ta.$time[0]) + Math.abs(1 - ta.$open[0]) + Math.abs(2 - ta.$high[0]) +
          Math.abs(3 - ta.$low[0]) + Math.abs(4 - ta.$close[0]) + Math.abs(5 - ta.$volume[0]);
  it(`objectFormat`, () => assert.ok(delta < 1e-2));
})

describe('Mean, SD', () => {
  let f = [21.40, 21.71, 21.20, 21.34, 21.49, 21.39, 22.16, 22.53, 22.44, 22.75, 23.23, 23.09, 22.85, 22.45, 22.48, 22.27, 22.37, 22.28, 23.06, 22.99];
  let expected = 22.2738;
  let actual = mean(f);
  let delta = Math.abs(expected - actual);
  it(`Direct mean test (${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
  expected = Math.sqrt(0.3985);
  actual = sd(f);
  delta = Math.abs(expected - actual);
  it(`Direct sd test (${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('Cov, Cor', () => {
  let f = [21.40, 21.71, 21.20, 21.34, 21.49, 21.39, 22.16, 22.53, 22.44, 22.75, 23.23, 23.09, 22.85, 22.45, 22.48, 22.27, 22.37, 22.28, 23.06, 22.99];
  let g = [54.83, 55.34, 54.38, 55.25, 56.07, 56.30, 57.05, 57.91, 58.20, 58.39, 59.19, 59.03, 57.96, 57.52, 57.76, 57.09, 57.85, 57.54, 58.85, 58.60];
  let expected = 0.8484;
  let actual = TA.cov(f, g);
  let delta = Math.abs(expected - actual);
  it(`Direct Cov test (${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
  expected = 0.9582;
  actual = TA.cor(f, g);
  delta = Math.abs(expected - actual);
  it(`Direct Cor test (${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('MAE', () => {
  it('Equal test', () => assert.ok(mae([-2,5,-8,9,-4],[-2,5,-8,9,-4]) < 1e-12));
  let data = [23.98,23.92,23.79,23.67,23.54,23.36,23.65,23.72,24.16,23.91,23.81,23.92,23.74,24.68,24.94,24.93,25.10,25.12,25.20,25.06];
  let delta = Math.abs(mae(data, new Array(data.length).fill(mean(data))) - 0.55);
  it(`Direct test (${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('MAPE', () => {
  let actual = mape([112.3, 108.4, 148.9, 117.4], [124.7, 103.7, 116.6, 78.5]);
  let expected = mean([11, 4.3, 21.7, 33.1]);
  let delta = Math.abs(actual - expected);
  it(`Direct test (${delta.toFixed(5)})`, () => assert.ok(delta < 1e-1));
})

describe('(N)RMSE', () => {
  it('Equal test', () =>rmse([-2,5,-8,9,-4],[-2,5,-8,9,-4]) < 1e-12);
  let delta = Math.abs(rmse([-2,5,-8,9,-4],[0,0,0,0,0]) - 6.16);
  it(`Direct test (RMSE=${delta.toFixed(5)})`, () =>delta < 1e-2)
  delta = Math.abs(nrmse([-2,5,-8,9,-4],[0,0,0,0,0]) - 6.16 / (9 + 8));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () =>delta < 1e-2)
})

describe('SMA', () => {
  let c = [22.27,22.19,22.08,22.17,22.18,22.13,22.23,22.43,22.24,22.29,22.15,22.39,22.38,22.61,23.36,
    24.05,23.75,23.83,23.95,23.63,23.82,23.87,23.65,23.19,23.10,23.33,22.68,23.10,22.40,22.17];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,22.22,22.21,22.23,22.26,22.31,22.42,22.61,
          22.77,22.91,23.08,23.21,23.38,23.53,23.65,23.71,23.69,23.61,23.51,23.43,23.28,23.13];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).sma();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).sma(10);
  let delta = nrmse(expected.slice(9), actual.slice(9))
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('EMA', () => {
  let c = [22.27,22.19,22.08,22.17,22.18,22.13,22.23,22.43,22.24,22.29,22.15,22.39,22.38,22.61,23.36,
    24.05,23.75,23.83,23.95,23.63,23.82,23.87,23.65,23.19,23.10,23.33,22.68,23.10,22.40,22.17];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,22.22,22.21,22.24,22.27,22.33,22.52,22.80,
          22.97,23.13,23.28,23.34,23.43,23.51,23.54,23.47,23.40,23.39,23.26,23.23,23.08,22.92];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).ema();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).ema(10);
  let delta = nrmse(expected.slice(9), actual.slice(9));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('DEMA', () => {
  let c = [0.00538239, 0.84339777, 0.86927437, 0.31924023, 0.12201374, 0.07550434, 0.41570588, 0.91353791, 0.7736791 , 0.76823038,
    0.6982075 , 0.03588361, 0.17369301, 0.18780441, 0.47262338, 0.62557742, 0.47361914, 0.32567783, 0.97971771, 0.81200196,
    0.68398998, 0.12635276, 0.86515361, 0.84587914, 0.92645571, 0.86366806, 0.24659213, 0.45445402, 0.04104703, 0.38195752,
    0.74852279, 0.10760785, 0.6406224 , 0.92948624, 0.3422517 , 0.27272847, 0.83295665, 0.35548816, 0.09350672, 0.50006735,
    0.62052226, 0.11668694, 0.09588492, 0.24512228, 0.69843441, 0.15775824, 0.91848258, 0.85879644, 0.07942072, 0.92170842,
    0.45120693, 0.73117409, 0.65203293, 0.03226302, 0.38359369, 0.41626146, 0.91271837, 0.32441678, 0.08506846, 0.15326203,
    0.71587408, 0.5866244 , 0.33246292, 0.15037903, 0.24132456, 0.04685455, 0.68110035, 0.44075099, 0.01500359, 0.72791364,
    0.86883588, 0.45297367, 0.2093929 , 0.04604388, 0.09596711, 0.95676931, 0.05257892, 0.91342419, 0.01437425, 0.21196185];
  let expected = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,
    NaN, NaN, NaN, NaN, NaN, NaN, NaN, 0.50244717, 0.47191376, 0.53304478, 0.43300062, 0.47624534, 0.57962543, 0.52660929, 0.46684371, 
    0.54935612, 0.50505427, 0.40739679, 0.4230109 , 0.46440108, 0.38044342, 0.30716668, 0.28274039, 0.36969627, 0.31468742, 0.44841402, 0.54415432,
    0.4397056 , 0.55151877, 0.53263615, 0.58252412, 0.60449355, 0.47679812, 0.45442857, 0.44385159, 0.55167959, 0.50199345, 0.4050806 , 0.34186437,
    0.42237974, 0.45831727, 0.42826765, 0.36108804, 0.32767669, 0.25516796, 0.34504993, 0.36278472, 0.27779659, 0.37570971,
    0.48920627, 0.48456609, 0.42343058, 0.33499443, 0.27447141, 0.42709486, 0.34030373, 0.47111918, 0.36747095, 0.32890773];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).dema(15);
  let delta = nrmse(expected.slice(29), actual.slice(29));
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('TEMA', () => {
  let c = [7.84090894e-01, 6.89609697e-01, 3.35015182e-01, 5.38412345e-01, 3.82601344e-01, 9.76651481e-01, 2.27132380e-01, 1.08623756e-01,
    2.67416509e-01, 9.76533857e-01, 2.98816654e-01, 1.70440985e-01, 9.33716042e-01, 9.49590722e-02, 2.97554880e-01, 3.41572916e-01,
    6.97506127e-01, 7.11564491e-01, 1.97148092e-02, 6.11278963e-02, 8.85803385e-01, 5.16950342e-01, 6.08442404e-01, 6.20483052e-01,
    9.43229901e-01, 8.06367096e-01, 4.88659785e-01, 1.54462826e-01, 1.59678909e-01, 2.15554283e-01, 3.12858984e-01, 3.32732910e-02,
    7.29550902e-01, 8.43492055e-01, 5.80419679e-01, 9.41481099e-01, 2.92356392e-01, 5.46929097e-01, 3.42553994e-01, 4.71695899e-01,
    7.17072901e-01, 4.56039560e-02, 4.97578743e-02, 8.52353806e-01, 3.46647094e-01, 8.70405632e-01, 6.95269654e-01, 9.21956219e-01,
    5.54612078e-01, 5.04047371e-01, 4.30421967e-01, 3.82460201e-01, 3.29388376e-01, 2.49494488e-02, 7.19300721e-01, 7.44559885e-01,
    9.55135224e-01, 4.23355532e-01, 9.53649771e-01, 1.90102461e-02, 9.50650494e-02, 6.06285918e-01, 7.22112999e-01, 1.75358972e-01,
    8.11588712e-01, 3.15314112e-01, 1.78194657e-01, 2.48391580e-01, 7.17012180e-01, 3.96922785e-01, 2.08147293e-01, 3.08851029e-01,
    7.43013424e-01, 8.30656467e-01, 8.86791586e-01, 1.10926714e-01, 2.88359765e-01, 4.18069556e-04, 9.11266873e-01, 1.15019872e-02];
  let expected = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,
    NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, 0.27477721, 0.44518421,
    0.40980158, 0.55602735, 0.6100629 , 0.72529024, 0.69060813, 0.64550068, 0.58528646, 0.52254416, 0.45678303, 0.30632516,
    0.42163996, 0.51961084, 0.66444651, 0.59903525, 0.72295997, 0.50809417, 0.36799024, 0.43036476, 0.51750313, 0.40416016,
    0.52791742, 0.45927274, 0.36162716, 0.31092944, 0.4282666 , 0.41349625, 0.34041649, 0.3185951, 0.44642595, 0.5738756,
    0.68946089, 0.5203039 , 0.44818557, 0.29787629, 0.48438484, 0.33084879];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).tema(15);
  let delta = nrmse(expected.slice(42), actual.slice(42));
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('BB', () => {
  let c = [86.16,89.09,88.78,90.32,89.07,91.15,89.44,89.18,86.93,87.68,86.96,89.43,89.32,88.72,
    87.45,87.26,89.50,87.90,89.13,90.70,92.90,92.98,91.80,92.66,92.68,92.30,92.77,92.54,92.95,
    93.20,91.07,89.83,89.74,90.40,90.74,88.02,88.09,88.84,90.78,90.54,91.39,90.65];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,86.12,
    86.14,85.87,85.85,85.70,85.65,85.59,85.56,85.60,85.98,86.27,86.82,86.87,86.91,87.12,87.63,87.83,
    87.56,87.76,87.97,87.95,87.96,87.95];
  let bb = new TA([c,c,c,c,c,c], TA.simpleFormat).bb();
  it('Finite test', () => assert.ok((bb.lower.every(isFinite) && bb.middle.every(isFinite) && bb.upper.every(isFinite))));
  bb = new TA([c,c,c,c,c,c], TA.simpleFormat).bb(20,2);
  let delta = nrmse(expected.slice(19), bb.lower.slice(19));
  it(`Precision test on lower (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('EBB', () => {
  let c = [11671,11691,11723,11697,11675,11637,11672,11755,11732,11787,11838,11825,11823,11872,11981,11977,11985,11990,11892,12040,12042,
    12062,12092,12162,12233,12240,12229,12273,12268,12227,12288,12318,12213,12106,12069,12130,12226,12058,12067,12258,12090,12214,12213,
    12024,12044,11993,11891,11613,11775,11859,12037,12019,12086,12171,12221,12198,12279,12351,12320,12377,12400,12394,12427,12409,11953,
    12076,11897,11962,12004,12190,12110,12050,11935,12044,12189,12261,12414,12583,12570,12626,12719,12657,12506,12447,12492,12437,12480,
    12385,12587,12572,12724,12681,12593,12501,12303,12240,12143,12132,11867,11896];
  let expected = [11670.75,11686.40,11713.58,11715.42,11712.49,11715.65,11712.47,11747.44,11756.34,11789.78,11838.17,11862.04,11877.11,
    11908.09,11984.58,12030.61,12064.94,12089.86,12079.20,12116.70,12142.76,12167.87,12195.99,12243.37,12306.98,12352.41,12379.09,12412.84,
    12433.59,12434.18,12450.84,12471.24,12456.81,12432.07,12408.82,12388.49,12386.81,12367.71,12348.20,12363.96,12345.09,12345.53,12343.93,
    12334.35,12318.81,12307.94,12312.56,12386.42,12362.18,12328.54,12315.26,12298.31,12297.17,12320.18,12353.44,12367.83,12405.66,12460.26,
    12485.42,12522.63,12556.27,12576.50,12600.30,12610.01,12607.86,12575.71,12564.73,12533.51,12498.82,12483.84,12456.76,12427.82,12405.19,
    12378.76,12379.30,12400.33,12478.96,12615.49,12696.70,12775.37,12868.57,12907.34,12890.25,12861.74,12842.89,12815.19,12796.28,12766.17,
    12779.01,12781.61,12836.08,12856.77,12845.66,12820.50,12806.31,12794.68,12790.72,12772.73,12803.05,12785.13]
  let ebb = new TA([c,c,c,c,c,c], TA.simpleFormat).ebb();
  it('Finite test', () => assert.ok((ebb.lower.every(isFinite) && ebb.middle.every(isFinite) && ebb.upper.every(isFinite))));
  ebb = new TA([c,c,c,c,c,c], TA.simpleFormat).ebb(14,2);
  let delta = nrmse(expected.slice(19), ebb.upper.slice(19));
  it(`Precision test on upper (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('PSAR', () => {
  let h = [9.8,9.6,9.9,9.8,9.2,9.4,9.5,9.3,9.9,10.2,10.1,10.5,11.3,11.6,11.6,11.8,11.9,11.9,11.6,11.4,11.2,11.4,
    11.3,11.3,10.9,10.8,10.7,10.8,10.0,10.1,9.8,9.8,9.5,9.4,9.5,9.4,9.6,10.0,10.0,9.8,10.1,10.0,9.4,9.5,9.3,9.4,9.4,10.1];
  let l = [9.6,9.4,9.5,9.3,9.0,9.2,9.1,8.9,9.6,9.8,9.6,9.5,10.8,11.3,11.2,11.3,11.7,11.6,11.3,11.1,10.9,11.1,
    11.1,11.0,10.8,10.5,10.6,10.1,9.8,9.8,9.5,9.6,9.3,9.1,9.1,9.0,9.3,9.8,9.9,9.6,9.7,9.3,9.1,9.2,9.1,8.8,9.3,9.3];
  let c = [9.76,9.41,9.85,9.33,9.06,9.40,9.22,9.31,9.76,10.00,9.59,10.40,11.23,11.44,11.44,11.78,11.88,11.67,11.33,11.05,
    11.09,11.35,11.27,11.00,10.76,10.54,10.68,10.09,9.89,10.04,9.63,9.66,9.36,9.37,9.10,9.43,9.52,9.81,9.91,9.76,9.96,9.26,9.40,9.22,9.20,9.37,9.35,10.08]
  // let expected = [NaN, 9.8, 9.4, 9.9, 9.9, 9.864, 9.82944, 9.7962624, 8.9, 8.9, 8.952, 9.00192, 9.0918048, 9.268460416, 9.501614374399999, 9.711452936959999,
  //   9.962078584524798, 10.233387582691327, 10.466713321114542, 10.667373456158506, 10.839941172296315, 10.9, 10.9, 11.9, 11.882, 11.83872, 11.7583968, 11.682892992,
  //   11.556261552639999, 11.380635397375999, 11.2225718576384, 11.015863234721792, 10.833959646555178, 10.619205296037453, 10.376132448671461, 10.171951256884027,
  //   9.961000030644902, 9.0, 9.02, 9.0396, 9.058808, 9.100455680000001, 10.1, 10.08, 10.0604, 10.041191999999999, 9.99154432, 8.8]
  let actual = new TA([c,c,h,l,c,c], TA.simpleFormat).psar();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  // let delta = nrmse(expected.slice(5), actual.slice(5));
  // it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
})

describe('VBP', () => {
  let c = [0,1,2,2,4, 5,5,7,9,9];
  let v = [10,10,10,10,10, 10,10,10,10,10];
  let expected = [0.1, 0.1, 0.2, 0, 0.1, 0.2, 0, 0.1, 0, 0.2];
  let actual = new TA([c,c,c,c,c,v], TA.simpleFormat).vbp();
  it('Finite test', () => assert.ok([actual.bottom, actual.top].every(isFinite) && actual.volumes.every(isFinite)));
  actual = new TA([c,c,c,c,c,v], TA.simpleFormat).vbp(10);
  let delta = nrmse(expected, actual.volumes) + Math.abs(actual.bottom) + Math.abs(actual.top - 9);
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 0.1));
})

describe('Keltner channel', () => {
  let h = [11711,11698,11743,11737,11727,11677,11704,11782,11757,11794,11859,11861,11845,11905,11983,11986,
    12021,12020,11892,12051,12058,12081,12092,12189,12239,12254,12240,12286,12276,12268,12303,12331,12390,
    12221,12130,12151,12235,12261,12115,12283,12243,12251,12258,12211,12087,12042,11989,11857,11801,11927,
    12078,12051,12116,12191,12260,12273,12285,12383,12382,12420,12407,12438,12451,12441,12012,12121,
    12075,11990,12073,12217,12208,12109,12057,12099,12190,12284,12427,12596,12602,12643,12754,12718];
  let l = [11577,11636,11653,11667,11600,11574,11635,11674,11701,11699,11778,11798,11745,11823,11868,11899,
    11962,11972,11818,11893,12019,11981,12026,12092,12150,12188,12157,12180,12236,12193,12220,12253,12176,
    12063,11983,12061,12130,12055,12019,12068,12042,12072,12157,11974,11936,11897,11696,11555,11615,11777,
    11860,12003,11973,12088,12171,12198,12174,12280,12319,12321,12369,12353,12387,12328,11918,11951,
    11863,11876,11963,12081,12106,11875,11925,11934,12042,12176,12262,12404,12541,12539,12627,12567];
  let c = [11671,11691,11723,11697,11675,11637,11672,11755,11732,11787,11838,11825,11823,11872,11981,11977,
    11985,11990,11892,12040,12042,12062,12092,12162,12233,12240,12229,12273,12268,12227,12288,12318,12213,
    12106,12069,12130,12226,12058,12067,12258,12090,12214,12213,12024,12044,11993,11891,11613,11775,11859,
    12037,12019,12086,12171,12221,12198,12279,12351,12320,12377,12400,12394,12427,12409,11953,12076,
    11897,11962,12004,12190,12110,12050,11935,12044,12189,12261,12414,12583,12570,12626,12719,12657];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,12057.39,
    12072.61,12096.61,12116.78,12147.59,12182.78,12210.92,12236.10,12266.96,12283.88,12297.52,12318.65,
    12340.20,12364.12,12363.76,12357.43,12352.59,12363.19,12364.48,12351.99,12383.71,12389.77,12407.13,
    12411.39,12409.27,12398.61,12382.17,12375.86,12340.30,12311.45,12292.92,12310.11,12298.63,12310.25,
    12325.99,12343.57,12353.19,12376.97,12405.79,12420.36,12445.25,12460.82,12479.33,12496.48,12515.38,
    12525.07,12507.17,12474.34,12440.87,12416.85,12434.98,12424.74,12426.44,12398.59,12393.51,12406.21,
    12421.22,12462.39,12524.45,12558.20,12600.24,12652.16,12692.18];
  let actual = new TA([h,h,h,l,c,c], TA.simpleFormat).keltner();
  it('Finite test', () => assert.ok(actual.lower.every(isFinite) && actual.middle.every(isFinite) && actual.upper.every(isFinite)));
  actual = new TA([h,h,h,l,c,c], TA.simpleFormat).keltner(14,2);
  let delta = nrmse(expected.slice(20), actual.upper.slice(20));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('VWAP', () => {
  let h = [12736,12731,12721,12715,12708,12719,12709,12708,12718,12716,12731,12735,12734,12729,12736,
    12730,12724,12723,12725,12713,12709,12709,12709,12714,12714,12712,12692,12690,12694,12695,12678];
  let l = [12699,12710,12711,12693,12698,12699,12682,12695,12705,12705,12708,12720,12725,12717,12725,
    12719,12711,12717,12710,12705,12704,12704,12705,12707,12707,12690,12687,12684,12684,12669,12667];
  let c = [12728,12711,12715,12704,12698,12707,12693,12705,12711,12715,12730,12728,12728,12729,12725,
    12722,12719,12720,12710,12706,12706,12707,12709,12714,12713,12690,12689,12684,12694,12669,12674];
  let v = [89329,16137,23945,20679,27252,20915,17372,17600,13896,6700,13848,9925,5540,10803,19400,
    9322, 9982, 8723, 7735, 30330,8486, 9885, 10728,10796,21740,43638,8000, 10340,10515,26587,11731];
  let expected = [12721,12720,12720,12717,12715,12714,12713,12712,12712,12712,12712,12713,12713,12714,12715,
    12715,12715,12715,12715,12715,12714,12714,12714,12714,12714,12712,12712,12711,12711,12709,12709];
  let actual = new TA([c,c,h,l,c,v], TA.simpleFormat).vwap();
  let delta = nrmse(expected, actual);
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 0.1));
})

describe('ZigZag', () => {
  let t = [-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27];
  let h = [-8,-4,-1,9,8,7,6,5,4,3,2,1,11,22,33,44,55,66,77,88,88,71,61,51,41,51,61,71,81,91,11];
  let l = [-9,-5,-2,8,7,6,5,4,3,2,1,0,10,20,30,40,50,60,70,80,85,70,60,50,40,50,60,70,80,90,10];
  let expected = [ -9, 9, 0, 88, 40, 91];
  let actual = new TA([t,h,h,l,l,l], TA.simpleFormat).zigzag();
  it('Finite test', () => assert.ok(actual.time.every(isFinite) && actual.price.every(isFinite)));
  actual = new TA([t,h,h,l,l,l], TA.simpleFormat).zigzag(10);
  let delta = nrmse(expected, actual.price);
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('STDDEV', () => {
  let c = [52.22,52.78,53.02,53.67,53.67,53.74,53.45,53.72,53.39,52.51,52.32,51.45,51.60,52.43,52.47,
    52.91,52.07,53.12,52.77,52.73,52.09,53.19,53.73,53.87,53.85,53.88,54.08,54.14,54.50,54.30,54.40,54.16];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,0.51,0.73,0.86,0.83,0.79,0.72,0.68,
    0.58,0.51,0.52,0.53,0.48,0.49,0.58,0.62,0.67,0.62,0.66,0.69,0.65,0.36,0.24];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).stdev();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).stdev(10);
  let delta = nrmse(expected.slice(10), actual.slice(10));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('MADEV', () => {
  let c = [23.98,23.92,23.79,23.67,23.54,23.36,23.65,23.72,24.16,23.91,23.81,23.92,23.74,24.68,24.94,24.93,
    25.10,25.12,25.20,25.06,24.50,24.31,24.57,24.62,24.49,24.37,24.41,24.35,23.75,24.09,23.98,23.92,
    23.79,23.67,23.54,23.36,23.65,23.72,24.16,23.91,23.81,23.92,23.74,24.68,24.94,24.93,25.10,25.12];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,0.55,0.56,
    0.55,0.54,0.53,0.49,0.44,0.39,0.36,0.38,0.37,0.37,0.37,0.36,0.39,0.41,0.44,0.44,0.42,0.37,0.33,
    0.32,0.30,0.28,0.28,0.31,0.34,0.39,0.44];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).madev();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).madev(20);
  let delta = nrmse(expected.slice(20), actual.slice(20));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
  
})

describe('EXPDEV', () => {
  let c = [11671,11691,11723,11697,11675,11637,11672,11755,11732,11787,11838,11825,11823,11872,11981,11977,11985,
    11990,11892,12040,12042,12062,12092,12162,12233,12240,12229,12273,12268,12227,12288,12318,12213,12106,12069,
    12130,12226,12058,12067,12258,12090,12214,12213,12024,12044,11993,11891,11613,11775,11859,12037,12019,12086,
    12171,12221,12198,12279,12351,12320,12377,12400,12394,12427,12409,11953,12076,11897,11962,12004,12190,12110,
    12050,11935,12044,12189,12261,12414,12583,12570,12626,12719,12657,12506,12447,12492,12437,12480,12385,12587,
    12572,12724,12681,12593,12501,12303,12240,12143,12132,11867,11896];
  let expected = [0.00,6.47,16.76,16.53,15.57,20.08,18.73,30.85,32.22,42.58,57.89,62.96,64.72,71.93,95.76,106.50,112.47,
    114.94,107.48,114.51,117.25,119.54,122.71,132.33,147.17,154.73,155.65,158.83,157.67,150.74,148.70,147.92,138.22,130.82,
    125.99,117.58,111.88,109.33,105.05,104.93,99.76,95.40,90.71,95.16,94.03,97.77,114.82,183.06,187.32,179.10,168.05,156.94,
    149.60,149.60,152.92,150.10,154.92,165.23,165.15,168.99,171.45,169.52,168.81,163.87,184.75,179.49,195.30,193.87,185.95,
    174.25,162.42,153.41,154.53,144.81,138.45,138.36,158.29,198.53,215.71,231.00,250.52,250.59,235.41,219.33,205.33,191.16,
    178.57,167.12,163.17,156.52,166.70,165.15,155.17,144.86,152.98,164.51,184.03,194.38,244.03,262.97]
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).expdev();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).expdev(14);
  let delta = nrmse(expected.slice(14), actual.slice(14));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
})

describe('MACD', () => {
  let c = [16.39,16.50,16.45,16.43,16.52,16.51,16.423,16.41,16.47,16.45,16.32,16.36,16.34,16.59,16.54,16.52,
    16.44,16.47,16.5,16.45,16.28,16.07,16.08,16.1,16.1,16.09,16.43,16.49,16.59,16.65,16.78,16.86,16.86,16.76];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,0.05,0.01,-0.01,-0.02,-0.01,0.00,-0.01,0.00,
    0.03,0.09,0.12,0.13,0.13,0.12,0.05,-0.01,-0.06,-0.10,-0.14,-0.17,-0.18,-0.16];
  let macd = new TA([c,c,c,c,c,c], TA.simpleFormat).macd();
  it('Finite test', () => assert.ok(macd.line.every(isFinite) && macd.signal.every(isFinite) && macd.hist.every(isFinite)));
  macd = new TA([c,c,c,c,c,c], TA.simpleFormat).macd(13,5,6);
  let delta = nrmse(expected.slice(19), macd.line.slice(19));
  it(`NRMSE test on macd line (${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
})

describe('RSI', () => {
  let c = [58.18,58.57,58.48,58.43,58.32,58.05,57.96,57.64,57.83,58.05,58.54,58.11,58.46,57.77,56.77,56.93,57.40,57.57,57.13,56.30,
    55.95,56.17,56.52,56.80,57.72,56.46,56.58,55.73,55.28,55.18,54.78,54.88,54.04,54.04,54.73,53.69,53.49,53.32,53.60,54.75,
    54.35,54.86,53.90,54.76,55.58,55.81,56.55,57.40,57.69,57.88,58.67,58.51,57.45,57.02,57.25,56.59,57.34,57.04,58.34,58.09,
    58.47,59.08,58.96,59.10,57.58,57.68,57.49,57.22,55.78,56.31,53.7,53.36,50.15,52.57,50.42,52.64,53.1,53.88,53.43,53.11,
    50.5,49.59,49.77,51.82,52.23,51.38,52.67,54.13,54.49,54.58,54.08,52.81,52.82,54.16,53.91,52.72,53.39,54.1,54.88]
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,34.97,37.27,43.60,45.73,41.37,34.66,32.28,35.29,
    39.86,43.31,52.88,42.34,43.49,37.73,35.08,34.50,32.20,33.40,28.81,28.81,37.04,31.19,30.20,29.35,32.71,44.42,41.70,46.22,
    39.95,46.90,52.55,54.02,58.50,62.95,64.36,65.29,68.92,67.38,58.13,54.84,56.27,51.27,56.05,53.77,61.13,59.18,61.21,64.27,
    63.21,63.96,51.71,52.35,50.96,48.96,39.96,44.04,32.38,31.22,22.88,36.62,31.29,40.86,42.65,45.64,44.21,43.17,35.78,33.63,
    34.47,43.29,44.89,42.23,47.33,52.45,53.64,53.95,51.87,46.91,46.95,52.50,51.42,46.51,49.44,52.41,55.51];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).rsi();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).rsi(14);
  let delta = nrmse(expected.slice(14), actual.slice(14));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('MFI', () => {
  let t = [24.63,24.69,24.99,25.36,25.19,25.17,25.01,24.96,25.08,25.25,25.21,25.37,25.61,25.58,25.46,
    25.33,25.09,25.03,24.91,24.89,25.13,24.64,24.51,24.15,23.98,24.07,24.36,24.35,24.14,24.81];
  let v = [18.730,12.272,24.691,18.358,22.964,15.919,16.067,16.568,16.019,9.774,22.573,12.987,10.907,5.799,
    7.395,5.818,7.165,5.673,5.625,5.023,7.457,11.798,12.366,13.295,9.257,9.691,8.870,7.169,11.356,13.379];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,49.47,45.11,36.27,28.41,31.53,
    33.87,41.30,42.80,31.83,23.76,26.51,24.07,22.38,22.18,21.53,30.84];
  let actual = new TA([t,t,t,t,t,v], TA.simpleFormat).mfi();
  it('Finite test', () => assert.ok(actual.slice(14).every(isFinite)));
  actual = new TA([t,t,t,t,t,v], TA.simpleFormat).mfi(14);
  let delta = nrmse(expected.slice(14), actual.slice(14));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('Stoch', () => {
  let h = [127.01,127.62,126.59,127.35,128.17,128.43,127.37,126.42,126.90,126.85,125.65,125.72,127.16,127.72,127.69,
    128.22,128.27,128.09,128.27,127.74,128.77,129.29,130.06,129.12,129.29,128.47,128.09,128.65,129.14,128.64];
  let l = [125.36,126.16,124.93,126.09,126.82,126.48,126.03,124.83,126.39,125.72,124.56,124.57,125.07,126.86,126.63,
    126.80,126.71,126.80,126.13,125.92,126.99,127.81,128.47,128.06,127.61,127.60,127.00,126.90,127.49,127.40];
  let c = [127.29,127.18,128.01,127.11,127.73,127.29,127.18,128.01,127.11,127.73,128.01,127.11,127.73,127.29,127.18,
    128.01,127.11,127.73,127.06,127.33,128.71,127.87,128.58,128.60,127.93,128.11,127.60,127.60,128.69,128.27];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,70.44,67.61,89.20,65.81,
    81.75,64.52,74.53,98.58,70.10,73.06,73.42,61.23,60.96,40.39,40.39,66.83,56.73];
  let actual = new TA([h,h,h,l,c,c], TA.simpleFormat).stoch();
  it('Finite test', () => assert.ok(actual.line.every(isFinite) && actual.signal.every(isFinite)));
  actual = new TA([h,h,h,l,c,c], TA.simpleFormat).stoch(14,3,1);
  let delta = nrmse(expected.slice(13), actual.line.slice(13));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('StochRsi', () => {
  let c = [58.18,58.57,58.48,58.43,58.32,58.05,57.96,57.64,57.83,58.05,58.54,58.11,58.46,57.77,56.77,56.93,57.40,57.57,57.13,56.30,
    55.95,56.17,56.52,56.80,57.72,56.46,56.58,55.73,55.28,55.18,54.78,54.88,54.04,54.04,54.73,53.69,53.49,53.32,53.60,54.75,
    54.35,54.86,53.90,54.76,55.58,55.81,56.55,57.40,57.69,57.88,58.67,58.51,57.45,57.02,57.25,56.59,57.34,57.04,58.34,58.09,
    58.47,59.08,58.96,59.10,57.58,57.68,57.49,57.22,55.78,56.31,53.7,53.36,50.15,52.57,50.42,52.64,53.1,53.88,53.43,53.11,
    50.5,49.59,49.77,51.82,52.23,51.38,52.67,54.13,54.49,54.58,54.08,52.81,52.82,54.16,53.91,52.72,53.39,54.1,54.88];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,
    0.26,0.14,0.11,0.00,0.06,0.00,0.00,0.34,0.10,0.06,0.02,0.27,1.00,0.83,1.00,0.64,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,
    0.96,0.63,0.51,0.56,0.39,0.42,0.14,0.56,0.45,0.56,0.74,0.68,0.72,0.03,0.08,0.00,0.00,0.00,0.17,0.00,0.00,0.00,0.33,0.20,
    0.44,0.48,0.77,0.72,0.72,0.49,0.47,0.51,0.90,0.97,0.85,1.00,1.00,1.00,1.00,0.90,0.65,0.66,0.93,0.88,0.62,0.61,0.87,1.00];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).stochRsi();
  it('Finite test', () => assert.ok(actual.line.every(isFinite) && actual.signal.every(isFinite)));
  actual = new TA([c,c,c,c,c,c], TA.simpleFormat).stochRsi(14,3,1);
  let delta = nrmse(expected.slice(28), actual.line.slice(28));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('MFI', () => {
  let t = [24.63,24.69,24.99,25.36,25.19,25.17,25.01,24.96,25.08,25.25,25.21,25.37,25.61,25.58,25.46,
    25.33,25.09,25.03,24.91,24.89,25.13,24.64,24.51,24.15,23.98,24.07,24.36,24.35,24.14,24.81];
  let v = [18.730,12.272,24.691,18.358,22.964,15.919,16.067,16.568,16.019,9.774,22.573,12.987,10.907,5.799,
    7.395,5.818,7.165,5.673,5.625,5.023,7.457,11.798,12.366,13.295,9.257,9.691,8.870,7.169,11.356,13.379];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,49.47,45.11,36.27,28.41,31.53,
    33.87,41.30,42.80,31.83,23.76,26.51,24.07,22.38,22.18,21.53,30.84];
  let actual = new TA([t,t,t,t,t,v], TA.simpleFormat).mfi();
  it('Finite test', () => assert.ok(actual.slice(14).every(isFinite)));
  actual = new TA([t,t,t,t,t,v], TA.simpleFormat).mfi(14);
  let delta = nrmse(expected.slice(14), actual.slice(14));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('VI', () => {
  let h = [1380.39,1376.51,1362.34,1351.53,1343.98,1363.13,1389.19,1391.74,1387.16,1385.03,1375.13,1394.16,1399.63,1407.14,1404.14,
    1405.95,1405.98,1405.87,1410.03,1407.73,1417.44,1418.71,1418.13,1426.68,1416.12,1413.49,1413.46,1416.17,1413.63,1413.95];
  let l = [1371.21,1362.19,1337.56,1329.24,1331.50,1338.17,1360.05,1381.37,1379.17,1373.35,1354.65,1365.45,1391.04,1394.46,1396.13,
    1398.80,1395.62,1397.32,1400.60,1401.83,1404.15,1414.67,1412.12,1410.86,1406.78,1400.50,1398.04,1409.11,1405.59,1406.57];
  let c = [1376.51,1362.66,1350.52,1338.31,1337.89,1360.02,1385.97,1385.30,1379.32,1375.32,1365.00,1390.99,1394.23,1401.35,1402.22,
    1402.80,1405.87,1404.11,1403.93,1405.53,1415.51,1418.16,1418.13,1413.17,1413.49,1402.08,1411.13,1410.44,1409.30,1410.49];
  let expected1 = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,1.10,1.15,
    1.26,1.33,1.34,1.35,1.26,1.21,1.21,1.23,1.35,1.26,1.05,1.11,1.07,1.06];
  let expected2 = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,0.89,0.87,
    0.79,0.73,0.66,0.75,0.82,0.82,0.80,0.73,0.72,0.85,0.90,0.93,0.93,0.94]
  let actual = new TA([c,c,h,l,c,c], TA.simpleFormat).vi();
  it('Finite test', () => assert.ok(actual.plus.slice(14).every(isFinite) && actual.minus.slice(14).every(isFinite)));
  actual = new TA([c,c,h,l,c,c], TA.simpleFormat).vi(14);
  let delta1 = nrmse(expected1.slice(14), actual.plus.slice(14));
  let delta2 = nrmse(expected2.slice(14), actual.minus.slice(14));
  it(`Precision test (NRMSE=${delta1.toFixed(5)}, ${delta2.toFixed(5)})`, () => assert.ok(delta1 + delta2 < 2e-2));
})

describe('CCI', () => {
  let h = [24.20,24.07,24.04,23.87,23.67,23.59,23.80,23.80,24.30,24.15,24.05,24.06,23.88,25.14,25.20,
    25.07,25.22,25.37,25.36,25.26,24.82,24.44,24.65,24.84,24.75,24.51,24.68,24.67,23.84,24.30];
  let l = [23.85,23.72,23.64,23.37,23.46,23.18,23.40,23.57,24.05,23.77,23.60,23.84,23.64,23.94,24.74,
    24.77,24.90,24.93,24.96,24.93,24.21,24.21,24.43,24.44,24.20,24.25,24.21,24.15,23.63,23.76];
  let c = [23.89,23.95,23.67,23.78,23.50,23.32,23.75,23.79,24.14,23.81,23.78,23.86,23.70,24.96,24.88,
    24.96,25.18,25.07,25.27,25.00,24.46,24.28,24.62,24.58,24.53,24.35,24.34,24.23,23.76,24.20];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,
    102.31,30.74,6.55,33.30,34.95,13.84,-10.75,-11.58,-29.35,-129.36,-73.07];
  let actual = new TA([h,h,h,l,c,c], TA.simpleFormat).cci();
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([h,h,h,l,c,c], TA.simpleFormat).cci(20,0.015);
  let delta = nrmse(expected.slice(20), actual.slice(20));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('OBV', () => {
  let c = [53.26,53.30,53.32,53.37,54.19,53.92,54.65,54.60];
  let v = [8000,8200,8100,8300,8900,9200,13300,10300];
  let expected = [0,8200,16300,24600,33500,24300,37600,27300];
  let actual = new TA([c,c,c,c,c,v], TA.simpleFormat).obv();
  let delta = nrmse(expected, actual.line);
  it('Finite test', () => assert.ok(actual.line.every(isFinite)));
  actual = new TA([c,c,c,c,c,v], TA.simpleFormat).obv(10);
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
  
})

describe('ADL', () => {
  let h = [62.34,62.05,62.27,60.79,59.93,61.75,60.00,59.00];
  let l = [61.37,60.69,60.10,58.61,58.71,59.86,57.97,58.02];
  let c = [62.15,60.81,60.45,59.18,59.24,60.20,58.48,58.24];
  let v = [7849,11692,10575,13059,20734,29630,17705,7259];
  let expected = [4774,-4855,-12019,-18249,-21006,-39976,-48785,-52785];
  let actual = new TA([c,c,h,l,c,v], TA.simpleFormat).adl();
  let delta = nrmse(expected, actual);
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('ADX', () => {
  let h = [30.20,30.28,30.45,29.35,29.35,29.29,28.83,28.73,28.67,28.85,28.64,27.68,27.21,26.87,27.41,26.94,26.52,26.52,
    27.09,27.69,28.45,28.53,28.67,29.01,29.87,29.80,29.75,30.65,30.60,30.76,31.17,30.89,30.04,30.66,30.60,31.97,
    32.10,32.03,31.63,31.85,32.71,32.76,32.58,32.13,33.12,33.19,32.52,32.44,33.22,32.83,33.62,33.75,33.60,34.08,
    34.58,34.22,34.77,34.74,35.01,34.94,34.42,34.40,34.16,33.34,33.39,33.51,33.96,34.42,34.72,33.94,33.66,34.51,
    34.87,34.75,35.17,36.16,36.45,36.03,36.45,36.74,36.61,36.83,36.84,36.89,36.38,35.99,35.86,35.88,35.73,36.07,
    35.60,34.98,35.58,36.07,36.21,36.46,36.44,36.54,35.81,35.26,35.21,34.59,34.73,34.86,35.31,35.50,36.63,37.14,
    37.27,37.70,37.87,38.38,39.17,39.05,39.09,39.27,39.11,39.86,39.53,39.74,39.87,39.82,39.61,39.75,39.53,39.18,
    39.90,39.84,39.64,38.70,38.80,39.08,39.52,40.04,40.25,40.43,40.28,40.15,40.75,39.88,40.26,39.15,39.25,40.06,
    40.45,40.96,41.20,41.29];
  let l = [29.41,29.32,29.96,28.74,28.56,28.41,28.08,27.43,27.66,27.83,27.40,27.09,26.18,26.13,26.63,26.13,25.43,25.35,
    25.88,26.96,27.14,28.01,27.88,27.99,28.76,29.14,28.71,28.93,30.03,29.39,30.14,30.43,29.35,29.99,29.52,30.94,
    31.54,31.36,30.92,31.20,32.13,32.23,31.97,31.56,32.21,32.63,31.76,31.78,32.09,32.19,32.76,33.04,33.05,33.33,
    33.73,33.70,34.20,34.31,34.14,33.57,33.57,33.37,33.21,32.66,32.77,32.92,33.08,33.64,33.86,33.00,33.01,32.87,
    34.11,33.89,34.44,35.28,35.78,35.60,36.00,36.08,35.79,36.33,35.96,36.41,35.87,35.25,35.19,35.12,35.24,35.62,
    34.74,34.49,35.00,35.00,35.76,35.83,35.82,36.10,35.22,34.76,34.23,34.03,34.37,34.28,34.20,35.12,35.85,36.43,
    36.87,37.31,37.34,37.82,38.08,38.47,38.56,38.62,38.69,39.19,39.09,39.32,39.45,39.14,38.93,39.27,39.02,38.74,
    38.89,39.32,38.97,38.15,38.30,38.23,38.89,39.42,39.78,39.93,39.76,39.35,39.84,39.47,38.85,38.73,38.71,39.20,
    40.14,40.26,40.67,40.89];
  let c = [29.87,30.24,30.10,28.90,28.92,28.48,28.56,27.56,28.47,28.28,27.49,27.23,26.35,26.33,27.03,26.22,26.01,25.46,
    27.03,27.45,28.36,28.43,27.95,29.01,29.38,29.36,28.91,30.61,30.05,30.19,31.12,30.54,29.78,30.04,30.49,31.47,
    32.05,31.97,31.13,31.66,32.64,32.59,32.19,32.10,32.93,33.00,31.94,32.39,32.49,32.80,33.38,33.42,33.17,33.63,
    33.96,34.05,34.73,34.70,34.71,33.89,33.91,34.03,33.62,32.72,33.08,33.06,33.92,34.08,33.96,33.34,33.23,34.47,
    34.23,34.63,35.05,36.05,36.10,35.99,36.40,36.44,36.33,36.61,36.48,36.48,36.31,35.57,35.22,35.56,35.49,35.87,
    34.80,34.72,35.30,36.00,36.08,36.16,36.09,36.11,35.31,35.13,34.25,34.43,34.49,34.64,35.30,35.43,36.62,37.06,
    37.26,37.62,37.87,38.19,39.03,38.74,39.03,39.15,39.02,39.25,39.13,39.72,39.72,39.41,39.06,39.56,39.28,38.95,
    39.55,39.77,39.31,38.17,38.72,38.99,39.44,39.97,39.93,40.05,39.98,40.08,40.12,39.71,38.97,38.94,39.19,40.04,
    40.41,40.76,41.15,41.19];
  let expectedDip = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,6.75,6.29,5.78,5.29,8.70,12.49,16.68,16.63,16.69,
    17.93,22.73,21.61,19.95,23.82,22.81,20.61,21.97,20.87,19.12,22.37,20.66,28.00,27.65,26.27,24.29,24.67,28.99,
    28.27,26.93,25.58,31.29,30.43,27.48,26.04,29.87,28.33,32.68,31.86,30.40,32.14,33.71,32.20,34.92,33.59,33.45,
    29.57,27.45,25.10,23.13,21.31,20.53,20.52,22.81,25.17,25.87,23.78,22.47,26.35,27.63,25.72,27.67,33.18,33.71,
    32.27,34.62,35.16,32.60,33.11,30.48,29.59,27.88,25.17,23.62,21.97,20.96,23.09,20.65,19.69,23.81,25.94,26.16,
    26.97,25.35,25.29,23.07,21.79,19.73,18.62,19.37,19.55,21.93,23.00,31.36,34.12,34.06,36.95,36.75,39.98,43.64,
    41.00,39.10,38.28,36.35,41.03,39.07,38.74,38.38,35.48,32.78,31.83,29.92,28.08,32.74,30.88,28.19,24.83,24.25,
    25.07,27.91,31.47,32.12,32.40,30.57,27.95,31.63,29.48,25.39,24.30,23.96,29.97,32.79,35.68,36.21,35.62];
  let expectedDim = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,32.42,33.95,36.43,33.89,30.02,28.47,25.87,24.90,
    23.47,21.65,19.92,18.94,20.64,18.13,17.36,20.20,18.74,17.81,23.94,22.44,24.09,21.63,20.67,20.92,22.47,
    21.28,19.65,18.86,19.96,22.24,20.47,19.54,24.39,23.12,21.07,19.98,18.61,17.55,16.74,15.47,14.25,13.87,
    13.02,12.52,11.56,15.06,13.98,14.43,14.60,17.99,16.98,16.14,14.91,13.92,12.91,19.11,18.06,15.70,14.74,
    15.49,14.56,13.25,12.52,13.49,12.96,12.21,13.95,13.32,15.66,14.97,19.24,23.00,22.13,21.23,20.25,19.11,
    25.33,26.53,24.36,21.96,21.03,19.77,18.68,17.83,24.94,28.11,30.57,30.92,29.79,28.00,24.91,23.91,21.10,
    19.63,18.84,17.98,16.96,15.95,14.17,13.31,12.56,11.69,11.10,10.12,10.71,10.01,9.54,12.25,13.75,12.71,
    14.72,17.07,15.20,14.33,16.95,23.29,21.78,19.89,18.60,17.42,16.56,15.65,16.61,19.58,17.70,20.37,23.65,
    23.84,22.50,20.55,19.66,18.24,17.23,16.49];
  let expectedAdx = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,
    32.93782908365052, 31.693789942557455, 29.61365748506925, 28.181656859380443, 26.851941992669406, 25.658254939035288, 23.888449767686136,
    22.66340061615808, 22.024405435598712, 21.549429329066268, 20.87892183788398, 19.70918482181101, 18.864936588259177, 18.935742547530086,
    19.047679989557455, 18.779520035139843, 17.96727058637965, 18.2116833568109, 18.502464889641654, 17.619065210502637, 16.798765508444976,
    16.846509961301926, 16.890844096097666, 17.66419498571518, 18.493497787387906, 19.263564674655438, 20.405178618367806, 21.865443772037672,
    23.165470476057898, 24.796075749521254, 26.310209217737228, 27.921843216437928, 28.268831783016484, 28.59103545198229, 28.490589736383715,
    28.079078465590776, 26.690631096605802, 25.47388261054667, 24.524232514170603, 24.278095341046633, 24.615301899395735, 25.262362492905613,
    24.25015796452217, 23.31025375959469, 23.467766379924374, 23.980587366737293, 24.051993457618575, 24.55704330390595, 25.872606572344033,
    27.303926837951728, 28.28624285843472, 29.52323870019779, 30.88269707539314, 31.5592429202589, 32.37132758355234, 32.38526579716477,
    32.448496653266275, 31.476443811500225, 29.571515063929446, 27.711647883682367, 25.873378122488877, 24.166413344237778, 23.128362045987895,
    22.188505875391332, 21.649339039879987, 20.180673899654842, 19.341491721313712, 18.746442788821586, 18.520451804604736, 18.292372671014544,
    18.22106800940501, 17.195807132861045, 16.876867450207875, 17.22061662808803, 17.76382101141, 18.006940972483978, 17.986288847870615,
    17.160332607501633, 16.075592444353024, 16.324696815962607, 17.090894163799003, 17.932206831943006, 19.127651540032616, 20.394255818911432,
    22.011395691808282, 24.083679151667848, 26.007942364394587, 27.823333300476104, 29.641171812715463, 31.329164716937722, 33.41527820285716,
    35.10208998659674, 36.81279860367987, 38.49025205089767, 39.21855115670138, 39.36179417667542, 39.640822801942385, 39.258367656806854,
    38.22891932331462, 38.1477619667561, 38.072401564237474, 37.17850315423574, 34.77795130199575, 32.70371333785171, 31.205081904482505,
    30.42522092466078, 30.3268275255158, 30.46665300245763, 30.791932938697308, 30.713264827073488, 29.778752715986354, 29.663052408489957,
    28.83933521438007, 27.030429475204887, 25.16483751563299, 23.58867185461271, 23.24228008438086, 23.368896820487112, 24.01185983142691,
    24.837667262159577, 25.690849511304275];
  let actual = new TA([c,c,h,l,c,c], TA.simpleFormat).adx(14);
  it('Finite test', () => assert.ok(actual.dip.slice(15).every(isFinite) && actual.dim.slice(15).every(isFinite)));
  let delta = nrmse(expectedDip.slice(30), actual.dip.slice(30));
  it(`Precision test dip (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
  delta = nrmse(expectedDim.slice(30), actual.dim.slice(30));
  it(`Precision test dim (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
  delta = nrmse(expectedAdx.slice(60), actual.adx.slice(60));
  it(`Precision test adx (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
})

describe('ATR', () => {
  let h = [58.38,58.64,58.58,58.64,58.69,58.35,58.22,58.32,58.55,58.27,58.63,58.66,58.54,58.42,57.68,56.94,57.5,57.7,57.57,56.52,56.44,
    56.43,56.67,56.86,57.72,57.72,56.78,56.37,55.91,55.64,55.16,55.15,54.73,54.33,54.86,54.55,53.9,54.12,53.76,54.81,54.84,54.89,
    54.65,55.04,55.59,55.92,56.59,57.48,57.75,57.98,58.84,58.52,58.2,57.56,57.83,57.67,57.34,57.28,58.38,58.67,58.8,59.18,59.29,
    59.31,58.77,58.41,58.1,58.31,57.22,56.38,55.6,54.55,52.66,52.62,52.58,53.22,53.43,53.88,53.87,53.94,51.68,51.22,50.79,51.82,
    52.95,52.44,52.84,54.19,54.82,55.25,55.15,54.14,52.9,54.17,54.69,53.77,53.43,54.21,55.49];
  let l = [57.87,58.02,58.23,58.33,58.18,57.69,57.47,57.44,57.67,57.7,58.13,57.72,57.6,57.75,56.64,56.36,56.78,57.22,57.06,56.03,55.94,
    55.85,55.99,56.56,57.04,56.41,56.27,55.65,55.25,55.14,54.62,54.62,53.99,53.85,54.43,53.59,53.03,53.16,53.17,53.56,54.34,53.59,
    53.8,53.84,54.81,55.41,55.98,56.42,57.32,57.43,58.23,57.86,57.25,56.96,57.05,56.37,56.81,56.48,57.58,57.99,57.83,58.4,58.5,
    58.8,57.43,57.38,56.94,56.53,55.72,54.87,53.7,51.86,50.15,49.49,50.36,50.89,52.42,53.06,52.72,52.56,50.04,49.55,49.62,49.9,
    51.26,51.2,50.7,53.17,53.64,54.12,53.98,52.53,51.46,53.43,53.74,52.39,52.11,53.33,53.84];
  let c = [58.18,58.57,58.48,58.43,58.32,58.05,57.96,57.64,57.83,58.05,58.54,58.11,58.46,57.77,56.77,56.93,57.4,57.57,57.13,56.3,55.95,
    56.17,56.52,56.8,57.72,56.46,56.58,55.73,55.28,55.18,54.78,54.88,54.04,54.04,54.73,53.69,53.49,53.32,53.6,54.75,54.35,54.86,
    53.9,54.76,55.58,55.81,56.55,57.4,57.69,57.88,58.67,58.51,57.45,57.02,57.25,56.59,57.34,57.04,58.34,58.09,58.47,59.08,58.96,
    59.1,57.58,57.68,57.49,57.22,55.78,56.31,53.7,53.36,50.15,52.57,50.42,52.64,53.1,53.88,53.43,53.11,50.5,49.59,49.77,51.82,
    52.23,51.38,52.67,54.13,54.49,54.58,54.08,52.81,52.82,54.16,53.91,52.72,53.39,54.1,54.88];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,0.66,0.69,0.69,0.69,0.67,0.66,0.69,0.68,0.67,0.67,0.65,0.67,0.71,0.70,0.72,
    0.71,0.70,0.69,0.68,0.69,0.68,0.69,0.72,0.73,0.75,0.73,0.77,0.75,0.79,0.81,0.84,0.84,0.81,0.81,0.83,0.80,0.78,0.80,0.80,0.83,0.81,
    0.81,0.85,0.84,0.84,0.88,0.86,0.87,0.86,0.86,0.83,0.89,0.90,0.92,0.98,1.02,1.06,1.17,1.28,1.41,1.54,1.58,1.67,1.62,1.57,1.54,1.53,
    1.64,1.64,1.61,1.64,1.64,1.61,1.65,1.64,1.61,1.58,1.55,1.55,1.54,1.53,1.49,1.49,1.48,1.44,1.45];
  let actual = new TA([c,c,h,l,c,c], TA.simpleFormat).atr();
  let delta = nrmse(expected.slice(13), actual.slice(13));
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  actual = new TA([c,c,h,l,c,c], TA.simpleFormat).atr(14);
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 2e-2));
})

describe('Williams', () => {
  let h = [127.01,127.62,126.59,127.35,128.17,128.43,127.37,126.42,126.90,126.85,125.65,125.72,127.16,127.72,127.69,
    128.22,128.27,128.09,128.27,127.74,128.77,129.29,130.06,129.12,129.29,128.47,128.09,128.65,129.14,128.64];
  let l = [125.36,126.16,124.93,126.09,126.82,126.48,126.03,124.83,126.39,125.72,124.56,124.57,125.07,126.86,126.63,
    126.80,126.71,126.80,126.13,125.92,126.99,127.81,128.47,128.06,127.61,127.60,127.00,126.90,127.49,127.40];
  let c = [127.29,127.18,128.01,127.11,127.73,127.29,127.18,128.01,127.11,127.73,128.01,127.11,127.73,127.29,127.18,
    128.01,127.11,127.73,127.06,127.33,128.71,127.87,128.58,128.60,127.93,128.11,127.60,127.60,128.69,128.27];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,-29.46,-32.30,-10.85,-34.11,
    -18.09,-35.40,-25.34,-1.43,-30.02,-26.91,-26.55,-38.80,-39.08,-59.42,-59.42,-33.09,-43.24];
  let actual = new TA([h,h,h,l,c,c], TA.simpleFormat).williams();
  it('Finite test', () => assert.ok(actual.slice(13).every(isFinite)));
  actual = new TA([h,h,h,l,c,c], TA.simpleFormat).williams(14);
  let delta = nrmse(expected.slice(13), actual.slice(13));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('ROC', () => {
  let c = [11045.27,11167.32,11008.61,11151.83,10926.77,10868.12,10520.32,10380.43,10785.14,10748.26,
    10896.91,10782.95,10620.16,10625.83,10510.95,10444.37,10068.01,10193.39,10066.57,10043.75];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,-3.85,-4.85,-4.52,-6.34,-7.86,-6.21,-4.31,-3.24];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).roc(12);
  let delta = nrmse(expected.slice(14), actual.slice(14));
  it('Finite test', () => assert.ok(actual.slice(14).every(isFinite)));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('FI', () => {
  let c = [50.8,51.56,51.35,52.45,51.65,51.51,52.18,52.4,52.36,52.31,52.48,52.46,52.24,51.8,50.26,51.08,50.33,50.12,50.03,
    50.05,50.43,51.47,52.42,52.4,52.45,52.72,52.82,52.85,52.37,52.27,53.24,54.08,54.26,54.75,54.94,55.05,54.88,54.99,55.11,56.41];
  let v = [20177800,22429800,17645800,18790000,14946000,13656400,16368600,16784800,20740200,28405800,18346400,20805000,20718000,
    17401400,57969600,23525400,23502600,21933800,26030800,16270200,18338200,23480000,21562600,12948000,10770600,13706400,12392600,
    14970600,19563800,11367400,19539000,36364000,20692000,16177400,13305800,17905400,12954800,18292600,16672600,32091200];
  let expected = [2361221.692,4459139.736,3292745.774,5775067.806,3241943.834,2505681,3714435.429,3711324.082,3062619.499,
    2422203.856,2521730.162,2102040.139,1150611.548,-107563.8161,-12845509.56,-8254604.191,-9593510.735,-8881023.202,
    -7946987.316,-6765217.128,-4803255.252,-628618.7878, 2387536.753,2009465.789,1799332.104,2070960.09,1952145.791,
    1737427.535,147705.8873,-35786.38233,2676873.101, 6658142.658,6239059.421,6480183.218,5915600.187,5351885.017,
    4272713.443,3949780.952,3671342.53,9106659.311];
  let actual = new TA([c,c,c,c,c,v], TA.simpleFormat).fi(13);
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  let delta = nrmse(expected.slice(20), actual.slice(20));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('KST', () => {
  let c = [1344.78,1357.98,1355.69,1325.51,1335.02,1313.72,1319.99,1331.85,1329.04,1362.16,1365.51,1374.02,1367.58,
    1354.68,1352.46,1341.47,1341.45,1334.76,1356.78,1353.64,1363.67,1372.78,1376.51,1362.66,1350.52,1338.31,
    1337.89,1360.02,1385.97,1385.30,1379.32,1375.32,1365.00,1390.99,1394.23,1401.35,1402.22,1402.80,1405.87,
    1404.11,1403.93,1405.53,1415.51,1418.16,1418.13,1413.17,1413.49,1402.08,1411.13,1410.44];
  let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,
    NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,36.60,37.23,38.38,38.78,37.54,36.25];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).kst().line;
  it('Finite test', () => assert.ok(actual.slice(44).every(isFinite)));
  let delta = nrmse(expected.slice(45), actual.slice(45));
  it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('BBP', () => {
  let c = [86.16,89.09,88.78,90.32,89.07,91.15,89.44,89.18,86.93,87.68,86.96,89.43,89.32,88.72,
    87.45,87.26,89.50,87.90,89.13,90.70,92.90,92.98,91.80,92.66,92.68,92.30,92.77,92.54,92.95,
    93.20,91.07,89.83,89.74,90.40,90.74,88.02,88.09,88.84,90.78,90.54,91.39,90.65];
  // let expected = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,86.12,
  //   86.14,85.87,85.85,85.70,85.65,85.59,85.56,85.60,85.98,86.27,86.82,86.87,86.91,87.12,87.63,87.83,
  //   87.56,87.76,87.97,87.95,87.96,87.95];
  let actual = new TA([c,c,c,c,c,c], TA.simpleFormat).bbp();
  it('Finite test', () => assert.ok(actual.slice(1).every(isFinite)));
  //let delta = nrmse(expected.slice(19), actual.slice(19));
  //it(`Precision test on lower (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})

describe('CHO', () => {
  let h = [62.34,62.05,62.27,60.79,59.93,61.75,60.00,59.00];
  let l = [61.37,60.69,60.10,58.61,58.71,59.86,57.97,58.02];
  let c = [62.15,60.81,60.45,59.18,59.24,60.20,58.48,58.24];
  let v = [7849,11692,10575,13059,20734,29630,17705,7259];
  //let expected = [4774,-4855,-12019,-18249,-21006,-39976,-48785,-52785];
  let actual = new TA([c,c,h,l,c,v], TA.simpleFormat).cho(13);
  //let delta = nrmse(expected, actual);
  it('Finite test', () => assert.ok(actual.every(isFinite)));
  //it(`Precision test (NRMSE=${delta.toFixed(5)})`, () => assert.ok(delta < 1e-2));
})